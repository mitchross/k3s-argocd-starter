replicas: 1
mode: standalone
existingSecret: ""
rootUser: minioadmin
rootPassword: minioadmin
image:
  repository: quay.io/minio/minio
  tag: RELEASE.2024-04-18T19-09-19Z
  pullPolicy: IfNotPresent
mcImage:
  repository: quay.io/minio/mc
  tag: RELEASE.2024-04-18T16-45-29Z
  pullPolicy: IfNotPresent
persistence:
  enabled: true
  storageClass: longhorn
  accessMode: ReadWriteOnce
  size: 20Gi
service:
  type: ClusterIP
  clusterIP: ~
  port: 9000
  nodePort: 32000
consoleService:
  type: ClusterIP
  clusterIP: ~
  port: 9001
  nodePort: 32001
resources:
  requests:
    memory: 512Mi
    cpu: 250m
  limits:
    memory: 1Gi
    cpu: 500m
securityContext:
  enabled: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  runAsNonRoot: true
podSecurityContext:
  enabled: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  runAsNonRoot: true
networkPolicy:
  enabled: false # We'll create custom ones
metrics:
  serviceMonitor:
    enabled: true
    labels:
      release: prometheus-stack
    interval: 30s
    scrapeTimeout: 10s
makeBucketJob:
  enabled: true
  annotations: {}
  podAnnotations: {}
  securityContext:
    enabled: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    runAsNonRoot: true
  resources:
    requests:
      memory: 128Mi
      cpu: 100m
    limits:
      memory: 256Mi
      cpu: 200m
buckets:
  - name: thanos
    policy: none
    purge: false
    versioning: false
    objectlocking: false
  - name: loki
    policy: none
    purge: false
    versioning: false
    objectlocking: false
  - name: tempo
    policy: none
    purge: false
    versioning: false
    objectlocking: false
users: []
svcaccts:
  - accessKey: thanos
    secretKey: thanos123
    user: thanos
  - accessKey: loki
    secretKey: loki123
    user: loki
  - accessKey: tempo
    secretKey: tempo123
    user: tempo
policies: []
customCommands: []
environment:
  MINIO_PROMETHEUS_URL: "http://prometheus-stack-kube-prom-prometheus.monitoring.svc.cluster.local:9090"
affinity: {}
tolerations: []
nodeSelector: {}
topologySpreadConstraints: []
ingress:
  enabled: false # Using custom ingress
consoleIngress:
  enabled: false # Using custom ingress
tls:
  enabled: false
  certSecret: ""
  publicCrt: ""
  privateKey: ""
trustedCertsSecret: ""
postJob:
  podAnnotations: {}
  annotations: {}
  securityContext:
    enabled: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    runAsNonRoot: true
  nodeSelector: {}
  tolerations: []
  affinity: {}
updateJob:
  podAnnotations: {}
  annotations: {}
  securityContext:
    enabled: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    runAsNonRoot: true
  nodeSelector: {}
  tolerations: []
  affinity: {}
